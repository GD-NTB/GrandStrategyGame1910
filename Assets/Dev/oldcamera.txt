using UnityEngine;

public class CameraBehaviour : MonoBehaviour
{
    private Camera cam;

    public bool DrawDebug = false;
        
    [Header("Panning")]
    [ReadOnly] public Vector3 panVelocity;
    public float PanOutVelocity;
    public float PanInVelocity;
    public float PanFriction;
    public float PanZeroThreshold;

    private Vector3 mousePositionLastFrame;
    
    [Header("Zooming")]
    [ReadOnly] public float zoomVelocity;
    [ReadOnly] public float currentZoomMultiplier;
    public float ZoomMin;
    public float ZoomMax;
    public float ZoomMinMultiplier;
    public float ZoomMaxMultiplier;
    public float ZoomFriction;
    public float ZoomZeroThreshold;
    
    [Header("Camera Bounds")]
    public Vector2 CameraBounds_X;
    public Vector2 CameraBounds_Y;

    [Header("Map Grid")]
    [ReadOnly] public float currentOpacity;
    public float MapGridOpacity;
    public float MapGridMinZoom;
    public float MapGridMaxZoom;
    private Material MapGridMaterial;

    void Start()
    {
        cam = Camera.main;
        MapGridMaterial = GameObject.Find("MapGrid").GetComponent<Renderer>().material;

        mousePositionLastFrame = Input.mousePosition;
    }

    void LateUpdate()
    {
        DoZoom();
        DoPan();
        DoCameraBounds();
        
        DoMapGridOpacity();

        mousePositionLastFrame = Input.mousePosition;
    }

    private void DoPan()
    {
       // fixes camera flying when mouse is offscreen and comes back (because mouse pos isn't updated offscreen)
        if (Input.GetMouseButtonDown(2)) { mousePositionLastFrame = Input.mousePosition; }

        // calculate pan multiplier based on linear interpolation of max and min zoom and velocity
        float panMultiplier = (PanOutVelocity - PanInVelocity)/(ZoomMax - ZoomMin) * (cam.orthographicSize - ZoomMin) + PanInVelocity;

        if (Input.GetMouseButton(2))
        {
            // we use ScreenToViewportPoint to use screen coordinates instead, therefore not using pixels and making panning resolution independent
            Vector3 mouseDelta = cam.ScreenToViewportPoint(Input.mousePosition) - cam.ScreenToViewportPoint(mousePositionLastFrame);
            
            panVelocity += new Vector3(
                mouseDelta.x,
                mouseDelta.y,
                0.0f) * panMultiplier * Time.deltaTime;
        }

        // snap to 0 velocity when threshold is met
        if (Mathf.Abs(panVelocity.magnitude) < PanZeroThreshold) { panVelocity = Vector3.zero; }

        // apply pan to camera
        cam.transform.position -= panVelocity;

        // apply friction
        panVelocity *= 1 - PanFriction * Time.deltaTime;
    }

    private void DoZoom()
    {
        // how zoomed in we are from 0-1
        // f\left(x\right)=\frac{x-a}{b-a}
        float zoomProgress = (cam.orthographicSize - ZoomMin) / (ZoomMax - ZoomMin);
        // lerp between zoom speeds based on how zoomed in we are
        currentZoomMultiplier = Mathf.Lerp(ZoomMinMultiplier, ZoomMaxMultiplier, zoomProgress);

        // calculate zoom velocity
        zoomVelocity += Input.mouseScrollDelta.y * currentZoomMultiplier;

        // snap to 0 velocity when threshold is met
        if (Mathf.Abs(zoomVelocity) < ZoomZeroThreshold) { zoomVelocity = 0.0f; }

        if (zoomVelocity != 0.0f)
        {
            // apply zoom to camera
            cam.orthographicSize -= zoomVelocity * Time.deltaTime;
        }

        // apply friction
        zoomVelocity *= 1 - ZoomFriction * Time.deltaTime;

        // clamp min and max
        cam.orthographicSize = Mathf.Clamp(cam.orthographicSize, ZoomMin, ZoomMax);
    }

    private void DoCameraBounds()
    {
        float yFOV = cam.orthographicSize;
        float xFOV = yFOV * cam.aspect;

        transform.position = new Vector3(x: Mathf.Clamp(transform.position.x, CameraBounds_X.x+xFOV, CameraBounds_X.y-xFOV),
                                         y: Mathf.Clamp(transform.position.y, CameraBounds_Y.x+yFOV, CameraBounds_Y.y-yFOV),
                                         z: transform.position.z);
        
        if (DrawDebug)
        {
            Debug.DrawLine(start: new Vector3(CameraBounds_X.x, CameraBounds_Y.x), // top
                             end: new Vector3(CameraBounds_X.y, CameraBounds_Y.x), Color.red);
            Debug.DrawLine(start: new Vector3(CameraBounds_X.x, CameraBounds_Y.y), // bottom
                             end: new Vector3(CameraBounds_X.y, CameraBounds_Y.y), Color.red);
            Debug.DrawLine(start: new Vector3(CameraBounds_X.x, CameraBounds_Y.x), // left
                             end: new Vector3(CameraBounds_X.x, CameraBounds_Y.y), Color.red);
            Debug.DrawLine(start: new Vector3(CameraBounds_X.y, CameraBounds_Y.x), // right
                             end: new Vector3(CameraBounds_X.y, CameraBounds_Y.y), Color.red);
        }
    }

    private void DoMapGridOpacity()
    {
        float zoomProgress = (cam.orthographicSize - MapGridMinZoom) / (MapGridMaxZoom - MapGridMinZoom);
        zoomProgress = Mathf.Clamp01(zoomProgress);

        // lerp between 0 and max opacity based on how zoomed in we are
        currentOpacity = Mathf.Lerp(0.0f, MapGridOpacity, zoomProgress);

        // set shader property
        MapGridMaterial.SetFloat("_Opacity", currentOpacity);
    }
}
